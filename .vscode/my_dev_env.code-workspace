{
    // Список папок, которые должны попасть в вашу multi-root.
    // Пути можно использовать абсолютные, поэтому можно собирать
    // воедино папки из разных мест
    "folders": [
        {
            "path": "task1-project"
        }
    ],
    // Общие настройки. Они являются дефолтными для всех включенных директорий,
    // но могут переопределяться на уровне конкретной корневой папки проекта.
    // Тут собраны те, что использую я
    "settings": {
        "git.autofetch": true,
        // Включить или выключить периодический поиск изменений в удаленном
        // репозитории. В случае, если включено в VS Code в разделе работы 
        // с git будет показывать сколько неполученных коммитов есть
        // в удаленном репозитории.
        "python.languageServer": "Pylance",
        // Выбор language server. У Python их несколько, с последнего времени
        // по дефолту используется Pylance. На мой взгляд лучше оставить его,
        // так как его делает Microsoft и он активно развивается.
        "python.defaultInterpreterPath": "/opt/homebrew/bin/python3.12",
        // Дефолтный путь для Питона
        "python.analysis.diagnosticMode": "openFilesOnly",
        // Выбор области, где производится анализ файлов на ошибки.
        // Я выбрал вариант "только открытые файлы" чтобы меньше логало
        "python.analysis.autoImportCompletions": true,
        // Включает автоматическое добавление импорта модуля, если его нет,
        // но в коде найдены на него ссылки
        "python.analysis.typeCheckingMode": "off",
        // Очень полезная, но очень суровая опция - включает проверку
        // соответствия типов для языкового движка Pylance. По сути попытка
        // сделать из Python типизированный язык. Доступные значения:
        //  off: анализ проверки типа не проводится; производится диагностика
        //       неразрешенных импортов/переменных
        //  basic: Правила, не связанные с проверкой типов (все правила в off)
        //         + базовые правила проверки типов
        //  strict: все правила проверки типов с наивысшей серьезностью ошибки
        //          (включая все правила в категориях off и basic)
        "python.analysis.inlayHints.variableTypes": true,
        // Анализирует ваши переменные и предлагает для них подходящие типы.
        // Так же позволяет двойным кликом добавить тип
        "python.analysis.inlayHints.functionReturnTypes": true,
        // Анализирует ваши функции и классы и предлагает подходящие типы
        // выходных данных. Так же дает подсказки, какой выходной тип вы получите
        "python.terminal.activateEnvironment": true,
        // Если в проекте найдено виртуальное окружение, то в терминале оно
        // будет автоматически активироваться при переходе в этот проект
        "python.linting.enabled": true,
        // Включает линтер для питона
        "python.linting.flake8Enabled": true,
        // Выбор каким линтером пользоваться.  Я выбрал flake8.
        "python.linting.flake8Args": [
            "--max-line-length=250",
            // "--ignore=E402,F841,F401,E302,E305",
        ],
        // Настройки flake8. Я лично выставил себе только увеличение максимальной
        // длинны строки - по дефолту 80, этого мало для меня
        "[python]": {
            // Настройка автоматического форматирования. Удобно тем, что при сохранении
            // автоматически приводит форматирование к правильному по мнению форматора виду
            "editor.defaultFormatter": "ms-python.python",
            // Выбор форматера
            "editor.formatOnSave": true,
            // Включает форматирование при сохранении
            "editor.codeActionsOnSave": {
                "source.organizeImports": true
                // Форматирует импорты. Могут быть проблемы, если импорты зависят друг от друга
            },
            "files.exclude": {
                // Крайне полезная на мой взгляд функция - задается список файлов, которые
                // исключаются из показа в дереве каталогов. Отлично подходит для скрытия всяких
                // ненужных системных каталогов
                "**/.git": true,
                "**/__pycache__": true,
                "**/.DS_Store": true,
                "**/Thumbs.db": true
            },
            "files.watcherExclude": {
                // еще одна крайне любопытная опция - за изменениями файлов из
                // этого списка VS Code не следит
                "**/.git/objects/**": true,
                "**/.git/subtree-cache/**": true,
                "**/node_modules/*/**": true,
                "**/.hg/store/**": true,
                "**/__pycache__/**": true,
                "**/.venv-*/**": true
            },
            "files.enableTrash": false,
            // Включение/выключение корзины. Если False то файлы удаляются сразу же
            "cSpell.language": "en,ru",
            // Крайне полезный плагин и настройки - проверка орфографии.
            // Настоятельно рекомендую к установке
            "cSpell.words": [
                // Тут список слов, которые мы добавили в исключения
                "Clickhouse",
                "fastapi",
                "jsonify",
                "loguru"
            ]
        }
    }
}